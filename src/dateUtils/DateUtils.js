class DateUtils {
  /**
   * @summary get date object from given param
   *
   * @param {Date | string | null | undefined} param
   *
   * @returns data object generated by the param, default return current date object
   */
  static getDateObject(param) {
    const temp = new Date(param);
    if (isNaN(temp.getTime())) {
      return new Date();
    }
    return temp;
  }

  static append0(num) {
    const numString = "" + num;
    if (numString.length < 2) {
      return "0" + numString;
    }
    return numString;
  }

  /**
   * @summary determined whether a date is a valid date
   *
   * @param {Date | string} date
   * @returns true if given string or date is a valid date, otherwise, false
   */
  static isValid(date) {
    const dateObject = new Date(date);
    return !isNaN(dateObject.getTime());
  }

  /**
   * @summary get local date relative to the given date
   *
   * @param {Date | string} date
   * @param {boolean} isUTCDate give date / string value represents utc time or not
   * @returns local date relative to the givne date
   */
  static getLocalDate(date = new Date(), isUTCDate = false) {
    let temp = new Date(date);
    if (!this.isValid(temp)) return new Date();
    const minutesDiff = temp.getTimezoneOffset();
    const milliSecondDiff = minutesDiff * 60 * 1000;
    if (isUTCDate) {
      // utc to local
      return new Date(temp.getTime() - 2 * milliSecondDiff);
    } else {
      // local to utc
      return new Date(temp.getTime());
      // return new Date(temp.getTime() - 1 * milliSecondDiff);
    }
  }

  /**
   * @summary get the yyyy-mm-dd string format, relative to local date time, of the given date object
   *
   * @param {Date | string | null | undefined} date
   * @param {boolean} isUTCDate give date / string value represents utc time or not
   * @returns string in yyyy-mm-dd formate of the given date, relative to local date time
   */
  static getyyyyMMdd(date, isUTCDate = false) {
    const localDate = this.getLocalDate(date, isUTCDate);
    const yyyy = localDate.getFullYear();
    const mm = localDate.getMonth() + 1;
    const dd = localDate.getDate();
    const mmString = this.append0(mm);
    const ddString = this.append0(dd);
    return `${yyyy}-${mmString}-${ddString}`;
  }

  static getTimeFormat24(date, isUTCDate = false) {
    let dateObject;
    if (!date) {
      dateObject = new Date();
    } else if (this.isValid(date)) {
      dateObject = new Date(date);
    }
    dateObject = this.getLocalDate(dateObject, isUTCDate);
    const hours = isUTCDate ? dateObject.getUTCHours() : dateObject.getHours();
    const minutes = dateObject.getMinutes();
    const seconds = dateObject.getSeconds();
    const hourString = this.append0(hours);
    const munteString = this.append0(minutes);
    const secondString = this.append0(seconds);
    return `${hourString}:${munteString}:${secondString}`;
  }
  static getTimeFormat12(date = new Date()) {
    let ampm = "a.m.";
    let hours = date.getHours();

    if (hours === 12) {
      ampm = "p.m.";
    } else if (hours > 12) {
      ampm = "p.m.";
      hours %= 12;
    }
    const minutes = date.getMinutes();
    const seconds = date.getSeconds();
    const hourString = this.append0(hours);
    const munteString = this.append0(minutes);
    const secondString = this.append0(seconds);
    return `${hourString}:${munteString}:${secondString} ${ampm}`;
  }

  static getyyyyMMddHHmmss(date = new Date()) {
    let dateObject;
    if (!date) {
      dateObject = new Date();
    } else if (this.isValid(date)) {
      dateObject = new Date(date);
    }
    const datePart = this.getyyyyMMdd(dateObject);
    const timePart = this.getTimeFormat24(dateObject);
    return `${datePart} ${timePart}`;
  }
  static getyyyyMMddhhmmss(date = new Date()) {
    let dateObject;
    if (!date) {
      dateObject = new Date();
    } else if (this.isValid(date)) {
      dateObject = new Date(date);
    }
    const datePart = this.getyyyyMMdd(dateObject);
    const timePart = this.getTimeFormat12(dateObject);
    return `${datePart} ${timePart}`;
  }

  /**
   * @summary get timestamp string in formart yyyy-MM-ddTHH:mm:ss-04:00
   * @param {Date | string | null | undefined} param
   * @returns timestamp for data base yyyy-MM-ddTHH:mm:ss-04:00
   */
  static getDatabaseTimeStamp(param) {
    const date = this.getDateObject(param);

    const localDateString = date.toString();
    // "Wed Oct 20 2021 11:22:30 GMT-0400 (Eastern Daylight Time)"

    const localRelativeToUTCString = localDateString.split("GMT")[0] + "UTC";
    // "Wed Oct 20 2021 11:22:58 UTC"

    const localRelativeToUTCDateObject = new Date(localRelativeToUTCString);
    // 2021-10-20T11:23:38.000Z

    const localISOString = localRelativeToUTCDateObject.toISOString();
    // "2021-10-20T11:24:19.000Z"

    const GMTPart = localDateString.split("GMT")[1];
    // "-0400 (Eastern Daylight Time)"

    const timezoneString = GMTPart.split(" ")[0];
    // "-0400"

    let tzs = timezoneString.substr(0, 3) + ":" + timezoneString.substr(3);
    // "-04:00"

    const temp = localISOString.replace("Z", tzs);
    // "2021-10-20T11:24:19.000-04:00"

    return temp;
  }
}

module.exports = DateUtils;

// https://help.sumologic.com/03Send-Data/Sources/04Reference-Information-for-Sources/Timestamps%2C-Time-Zones%2C-Time-Ranges%2C-and-Date-Formats
/** time stamp string formate support by javascript, IOW, time string formate that could be pase into valid javascript Date object */
const VALID_TIME_STAMPS = {
  "yyyy MMM dd HH:mm:ss.SSS zzz": "2017 Mar 03 05:12:41.211 PDT",
  "MMM dd HH:mm:ss ZZZZ yyyy": "Jan 21 18:20:11 +0000 2017",
  "MMM dd, yyyy hh:mm:ss a": "Dec 2, 2017 2:39:58 AM",
  "MMM dd yyyy HH:mm:ss": "Jun 09 2018 15:28:14",
  "MMM dd HH:mm:ss yyyy": "Apr 20 00:00:35 2010",
  "MMM dd HH:mm:ss ZZZZ": "Sep 28 19:00:00 +0000",
  "MMM dd HH:mm:ss": "Mar 16 08:12:04",
  "yyyy-MM-dd'T'HH:mm:ssZZZZ": "2017-10-14T22:11:20+0000",
  "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'": "2017-07-01T14:59:55.711+0000",
  "yyyy-MM-dd'T'HH:mm:ss.SSS'Z0'": "2017-07-01T14:59:55.711Z",
  "yyyy-MM-dd HH:mm:ss ZZZZ": "2017-08-19 12:17:55 -0400",
  "yyyy-MM-dd HH:mm:ssZZZZ": "2017-08-19 12:17:55-0400",
  "yyyy/MM/dd*HH:mm:ss": "2017/04/12*19:37:50",
  "yyyy MMM dd HH:mm:ss.SSS*zzz": "2018 Apr 13 22:08:13.211*PDT",
  "yyyy MMM dd HH:mm:ss.SSS": "2017 Mar 10 01:44:20.392",
  "yyyy-MM-dd HH:mm:ss.SSS": "2018-02-27 15:35:20.311",
  "yyyy-MM-dd HH:mm:ss.SSSZZZZ": "2017-03-12 13:11:34.222-0700",
  "yyyy-MM-dd'T'HH:mm:ss.SSS": "2017-07-22T16:28:55.444",
  "yyyy-MM-dd'T'HH:mm:ss": "2017-09-08T03:13:10",
  "yyyy-MM-dd*HH:mm:ss:SSS": "2017-10-30*02:47:33:899",
  "yyyy-MM-dd*HH:mm:ss": "2017-07-04*13:23:55",
  "yy-MM-dd HH:mm:ss": "10-04-19 12:00:17",
  "yy/MM/dd HH:mm:ss": "06/01/22 04:11:05",
  "yyMMdd HH:mm:ss": "150423 11:42:35",
  "MM/dd/yy*HH:mm:ss": "08/10/11*13:33:56",
  "MM/dd/yyyy*HH:mm:ss": "11/22/2017*05:13:11",
  "MM/dd/yy HH:mm:ss ZZZZ": "04/23/17 04:34:22 +0000",
  "MM/dd/yyyy HH:mm:ss ZZZZ ": "10/03/2017 07:29:46 -0700",
  "dd/MMM/yyyy HH:mm:ss": "23/Apr/2017 11:42:35",
  "dd-MMM-yyyy HH:mm:ss": "23-Apr-2017 11:42:35",
  "dd-MMM-yyyy HH:mm:ss.SSS": "23-Apr-2017 11:42:35.883",
  "dd MMM yyyy HH:mm:ss": "23 Apr 2017 11:42:35",
  "MM/dd/yyyy hh:mm:ss a": "9/28/2011 2:23:15 PM",
};
